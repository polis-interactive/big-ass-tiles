// source: common.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

goog.exportSymbol('proto.SignageBackend.v1.common.ColorType', null, global);
goog.exportSymbol('proto.SignageBackend.v1.common.DefaultResponse', null, global);
goog.exportSymbol('proto.SignageBackend.v1.common.EmptyRequest', null, global);
goog.exportSymbol('proto.SignageBackend.v1.common.EmptyResponse', null, global);
goog.exportSymbol('proto.SignageBackend.v1.common.InteractionButtonMash', null, global);
goog.exportSymbol('proto.SignageBackend.v1.common.InteractionRequest', null, global);
goog.exportSymbol('proto.SignageBackend.v1.common.InteractionRequest.InteractionCase', null, global);
goog.exportSymbol('proto.SignageBackend.v1.common.InteractionSing', null, global);
goog.exportSymbol('proto.SignageBackend.v1.common.InteractionType', null, global);
goog.exportSymbol('proto.SignageBackend.v1.common.InteractionVibes', null, global);
goog.exportSymbol('proto.SignageBackend.v1.common.SignState', null, global);
goog.exportSymbol('proto.SignageBackend.v1.common.SignStateType', null, global);
goog.exportSymbol('proto.SignageBackend.v1.common.VibeType', null, global);
goog.exportSymbol('proto.SignageBackend.v1.common.successFailure', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SignageBackend.v1.common.EmptyRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SignageBackend.v1.common.EmptyRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.SignageBackend.v1.common.EmptyRequest.displayName = 'proto.SignageBackend.v1.common.EmptyRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SignageBackend.v1.common.EmptyResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SignageBackend.v1.common.EmptyResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.SignageBackend.v1.common.EmptyResponse.displayName = 'proto.SignageBackend.v1.common.EmptyResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SignageBackend.v1.common.successFailure = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SignageBackend.v1.common.successFailure, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.SignageBackend.v1.common.successFailure.displayName = 'proto.SignageBackend.v1.common.successFailure';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SignageBackend.v1.common.DefaultResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SignageBackend.v1.common.DefaultResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.SignageBackend.v1.common.DefaultResponse.displayName = 'proto.SignageBackend.v1.common.DefaultResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SignageBackend.v1.common.InteractionVibes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SignageBackend.v1.common.InteractionVibes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.SignageBackend.v1.common.InteractionVibes.displayName = 'proto.SignageBackend.v1.common.InteractionVibes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SignageBackend.v1.common.InteractionSing = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SignageBackend.v1.common.InteractionSing, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.SignageBackend.v1.common.InteractionSing.displayName = 'proto.SignageBackend.v1.common.InteractionSing';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SignageBackend.v1.common.InteractionButtonMash = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SignageBackend.v1.common.InteractionButtonMash, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.SignageBackend.v1.common.InteractionButtonMash.displayName = 'proto.SignageBackend.v1.common.InteractionButtonMash';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SignageBackend.v1.common.InteractionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.SignageBackend.v1.common.InteractionRequest.oneofGroups_);
};
goog.inherits(proto.SignageBackend.v1.common.InteractionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.SignageBackend.v1.common.InteractionRequest.displayName = 'proto.SignageBackend.v1.common.InteractionRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SignageBackend.v1.common.SignState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SignageBackend.v1.common.SignState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.SignageBackend.v1.common.SignState.displayName = 'proto.SignageBackend.v1.common.SignState';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SignageBackend.v1.common.EmptyRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.SignageBackend.v1.common.EmptyRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SignageBackend.v1.common.EmptyRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SignageBackend.v1.common.EmptyRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SignageBackend.v1.common.EmptyRequest}
 */
proto.SignageBackend.v1.common.EmptyRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SignageBackend.v1.common.EmptyRequest;
  return proto.SignageBackend.v1.common.EmptyRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SignageBackend.v1.common.EmptyRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SignageBackend.v1.common.EmptyRequest}
 */
proto.SignageBackend.v1.common.EmptyRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SignageBackend.v1.common.EmptyRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SignageBackend.v1.common.EmptyRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SignageBackend.v1.common.EmptyRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SignageBackend.v1.common.EmptyRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SignageBackend.v1.common.EmptyResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.SignageBackend.v1.common.EmptyResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SignageBackend.v1.common.EmptyResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SignageBackend.v1.common.EmptyResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SignageBackend.v1.common.EmptyResponse}
 */
proto.SignageBackend.v1.common.EmptyResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SignageBackend.v1.common.EmptyResponse;
  return proto.SignageBackend.v1.common.EmptyResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SignageBackend.v1.common.EmptyResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SignageBackend.v1.common.EmptyResponse}
 */
proto.SignageBackend.v1.common.EmptyResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SignageBackend.v1.common.EmptyResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SignageBackend.v1.common.EmptyResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SignageBackend.v1.common.EmptyResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SignageBackend.v1.common.EmptyResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SignageBackend.v1.common.successFailure.prototype.toObject = function(opt_includeInstance) {
  return proto.SignageBackend.v1.common.successFailure.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SignageBackend.v1.common.successFailure} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SignageBackend.v1.common.successFailure.toObject = function(includeInstance, msg) {
  var f, obj = {
    success: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    error: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SignageBackend.v1.common.successFailure}
 */
proto.SignageBackend.v1.common.successFailure.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SignageBackend.v1.common.successFailure;
  return proto.SignageBackend.v1.common.successFailure.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SignageBackend.v1.common.successFailure} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SignageBackend.v1.common.successFailure}
 */
proto.SignageBackend.v1.common.successFailure.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SignageBackend.v1.common.successFailure.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SignageBackend.v1.common.successFailure.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SignageBackend.v1.common.successFailure} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SignageBackend.v1.common.successFailure.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getError();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional bool Success = 1;
 * @return {boolean}
 */
proto.SignageBackend.v1.common.successFailure.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.SignageBackend.v1.common.successFailure} returns this
 */
proto.SignageBackend.v1.common.successFailure.prototype.setSuccess = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional string Error = 2;
 * @return {string}
 */
proto.SignageBackend.v1.common.successFailure.prototype.getError = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.SignageBackend.v1.common.successFailure} returns this
 */
proto.SignageBackend.v1.common.successFailure.prototype.setError = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SignageBackend.v1.common.DefaultResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.SignageBackend.v1.common.DefaultResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SignageBackend.v1.common.DefaultResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SignageBackend.v1.common.DefaultResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: (f = msg.getStatus()) && proto.SignageBackend.v1.common.successFailure.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SignageBackend.v1.common.DefaultResponse}
 */
proto.SignageBackend.v1.common.DefaultResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SignageBackend.v1.common.DefaultResponse;
  return proto.SignageBackend.v1.common.DefaultResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SignageBackend.v1.common.DefaultResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SignageBackend.v1.common.DefaultResponse}
 */
proto.SignageBackend.v1.common.DefaultResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.SignageBackend.v1.common.successFailure;
      reader.readMessage(value,proto.SignageBackend.v1.common.successFailure.deserializeBinaryFromReader);
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SignageBackend.v1.common.DefaultResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SignageBackend.v1.common.DefaultResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SignageBackend.v1.common.DefaultResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SignageBackend.v1.common.DefaultResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.SignageBackend.v1.common.successFailure.serializeBinaryToWriter
    );
  }
};


/**
 * optional successFailure Status = 1;
 * @return {?proto.SignageBackend.v1.common.successFailure}
 */
proto.SignageBackend.v1.common.DefaultResponse.prototype.getStatus = function() {
  return /** @type{?proto.SignageBackend.v1.common.successFailure} */ (
    jspb.Message.getWrapperField(this, proto.SignageBackend.v1.common.successFailure, 1));
};


/**
 * @param {?proto.SignageBackend.v1.common.successFailure|undefined} value
 * @return {!proto.SignageBackend.v1.common.DefaultResponse} returns this
*/
proto.SignageBackend.v1.common.DefaultResponse.prototype.setStatus = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.SignageBackend.v1.common.DefaultResponse} returns this
 */
proto.SignageBackend.v1.common.DefaultResponse.prototype.clearStatus = function() {
  return this.setStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.SignageBackend.v1.common.DefaultResponse.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SignageBackend.v1.common.InteractionVibes.prototype.toObject = function(opt_includeInstance) {
  return proto.SignageBackend.v1.common.InteractionVibes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SignageBackend.v1.common.InteractionVibes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SignageBackend.v1.common.InteractionVibes.toObject = function(includeInstance, msg) {
  var f, obj = {
    vibetype: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SignageBackend.v1.common.InteractionVibes}
 */
proto.SignageBackend.v1.common.InteractionVibes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SignageBackend.v1.common.InteractionVibes;
  return proto.SignageBackend.v1.common.InteractionVibes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SignageBackend.v1.common.InteractionVibes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SignageBackend.v1.common.InteractionVibes}
 */
proto.SignageBackend.v1.common.InteractionVibes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.SignageBackend.v1.common.VibeType} */ (reader.readEnum());
      msg.setVibetype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SignageBackend.v1.common.InteractionVibes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SignageBackend.v1.common.InteractionVibes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SignageBackend.v1.common.InteractionVibes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SignageBackend.v1.common.InteractionVibes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVibetype();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional VibeType VibeType = 1;
 * @return {!proto.SignageBackend.v1.common.VibeType}
 */
proto.SignageBackend.v1.common.InteractionVibes.prototype.getVibetype = function() {
  return /** @type {!proto.SignageBackend.v1.common.VibeType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.SignageBackend.v1.common.VibeType} value
 * @return {!proto.SignageBackend.v1.common.InteractionVibes} returns this
 */
proto.SignageBackend.v1.common.InteractionVibes.prototype.setVibetype = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SignageBackend.v1.common.InteractionSing.prototype.toObject = function(opt_includeInstance) {
  return proto.SignageBackend.v1.common.InteractionSing.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SignageBackend.v1.common.InteractionSing} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SignageBackend.v1.common.InteractionSing.toObject = function(includeInstance, msg) {
  var f, obj = {
    octave: jspb.Message.getFieldWithDefault(msg, 1, 0),
    note: jspb.Message.getFieldWithDefault(msg, 2, 0),
    peak: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SignageBackend.v1.common.InteractionSing}
 */
proto.SignageBackend.v1.common.InteractionSing.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SignageBackend.v1.common.InteractionSing;
  return proto.SignageBackend.v1.common.InteractionSing.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SignageBackend.v1.common.InteractionSing} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SignageBackend.v1.common.InteractionSing}
 */
proto.SignageBackend.v1.common.InteractionSing.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setOctave(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNote(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPeak(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SignageBackend.v1.common.InteractionSing.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SignageBackend.v1.common.InteractionSing.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SignageBackend.v1.common.InteractionSing} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SignageBackend.v1.common.InteractionSing.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOctave();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getNote();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getPeak();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional uint32 Octave = 1;
 * @return {number}
 */
proto.SignageBackend.v1.common.InteractionSing.prototype.getOctave = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.SignageBackend.v1.common.InteractionSing} returns this
 */
proto.SignageBackend.v1.common.InteractionSing.prototype.setOctave = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 Note = 2;
 * @return {number}
 */
proto.SignageBackend.v1.common.InteractionSing.prototype.getNote = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.SignageBackend.v1.common.InteractionSing} returns this
 */
proto.SignageBackend.v1.common.InteractionSing.prototype.setNote = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 Peak = 3;
 * @return {number}
 */
proto.SignageBackend.v1.common.InteractionSing.prototype.getPeak = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.SignageBackend.v1.common.InteractionSing} returns this
 */
proto.SignageBackend.v1.common.InteractionSing.prototype.setPeak = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SignageBackend.v1.common.InteractionButtonMash.prototype.toObject = function(opt_includeInstance) {
  return proto.SignageBackend.v1.common.InteractionButtonMash.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SignageBackend.v1.common.InteractionButtonMash} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SignageBackend.v1.common.InteractionButtonMash.toObject = function(includeInstance, msg) {
  var f, obj = {
    color: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SignageBackend.v1.common.InteractionButtonMash}
 */
proto.SignageBackend.v1.common.InteractionButtonMash.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SignageBackend.v1.common.InteractionButtonMash;
  return proto.SignageBackend.v1.common.InteractionButtonMash.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SignageBackend.v1.common.InteractionButtonMash} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SignageBackend.v1.common.InteractionButtonMash}
 */
proto.SignageBackend.v1.common.InteractionButtonMash.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.SignageBackend.v1.common.ColorType} */ (reader.readEnum());
      msg.setColor(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SignageBackend.v1.common.InteractionButtonMash.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SignageBackend.v1.common.InteractionButtonMash.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SignageBackend.v1.common.InteractionButtonMash} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SignageBackend.v1.common.InteractionButtonMash.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getColor();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional ColorType Color = 1;
 * @return {!proto.SignageBackend.v1.common.ColorType}
 */
proto.SignageBackend.v1.common.InteractionButtonMash.prototype.getColor = function() {
  return /** @type {!proto.SignageBackend.v1.common.ColorType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.SignageBackend.v1.common.ColorType} value
 * @return {!proto.SignageBackend.v1.common.InteractionButtonMash} returns this
 */
proto.SignageBackend.v1.common.InteractionButtonMash.prototype.setColor = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.SignageBackend.v1.common.InteractionRequest.oneofGroups_ = [[2,3,4]];

/**
 * @enum {number}
 */
proto.SignageBackend.v1.common.InteractionRequest.InteractionCase = {
  INTERACTION_NOT_SET: 0,
  BUTTONMASH: 2,
  SING: 3,
  VIBE: 4
};

/**
 * @return {proto.SignageBackend.v1.common.InteractionRequest.InteractionCase}
 */
proto.SignageBackend.v1.common.InteractionRequest.prototype.getInteractionCase = function() {
  return /** @type {proto.SignageBackend.v1.common.InteractionRequest.InteractionCase} */(jspb.Message.computeOneofCase(this, proto.SignageBackend.v1.common.InteractionRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SignageBackend.v1.common.InteractionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.SignageBackend.v1.common.InteractionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SignageBackend.v1.common.InteractionRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SignageBackend.v1.common.InteractionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    buttonmash: (f = msg.getButtonmash()) && proto.SignageBackend.v1.common.InteractionButtonMash.toObject(includeInstance, f),
    sing: (f = msg.getSing()) && proto.SignageBackend.v1.common.InteractionSing.toObject(includeInstance, f),
    vibe: (f = msg.getVibe()) && proto.SignageBackend.v1.common.InteractionVibes.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SignageBackend.v1.common.InteractionRequest}
 */
proto.SignageBackend.v1.common.InteractionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SignageBackend.v1.common.InteractionRequest;
  return proto.SignageBackend.v1.common.InteractionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SignageBackend.v1.common.InteractionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SignageBackend.v1.common.InteractionRequest}
 */
proto.SignageBackend.v1.common.InteractionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.SignageBackend.v1.common.InteractionType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = new proto.SignageBackend.v1.common.InteractionButtonMash;
      reader.readMessage(value,proto.SignageBackend.v1.common.InteractionButtonMash.deserializeBinaryFromReader);
      msg.setButtonmash(value);
      break;
    case 3:
      var value = new proto.SignageBackend.v1.common.InteractionSing;
      reader.readMessage(value,proto.SignageBackend.v1.common.InteractionSing.deserializeBinaryFromReader);
      msg.setSing(value);
      break;
    case 4:
      var value = new proto.SignageBackend.v1.common.InteractionVibes;
      reader.readMessage(value,proto.SignageBackend.v1.common.InteractionVibes.deserializeBinaryFromReader);
      msg.setVibe(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SignageBackend.v1.common.InteractionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SignageBackend.v1.common.InteractionRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SignageBackend.v1.common.InteractionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SignageBackend.v1.common.InteractionRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getButtonmash();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.SignageBackend.v1.common.InteractionButtonMash.serializeBinaryToWriter
    );
  }
  f = message.getSing();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.SignageBackend.v1.common.InteractionSing.serializeBinaryToWriter
    );
  }
  f = message.getVibe();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.SignageBackend.v1.common.InteractionVibes.serializeBinaryToWriter
    );
  }
};


/**
 * optional InteractionType type = 1;
 * @return {!proto.SignageBackend.v1.common.InteractionType}
 */
proto.SignageBackend.v1.common.InteractionRequest.prototype.getType = function() {
  return /** @type {!proto.SignageBackend.v1.common.InteractionType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.SignageBackend.v1.common.InteractionType} value
 * @return {!proto.SignageBackend.v1.common.InteractionRequest} returns this
 */
proto.SignageBackend.v1.common.InteractionRequest.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional InteractionButtonMash ButtonMash = 2;
 * @return {?proto.SignageBackend.v1.common.InteractionButtonMash}
 */
proto.SignageBackend.v1.common.InteractionRequest.prototype.getButtonmash = function() {
  return /** @type{?proto.SignageBackend.v1.common.InteractionButtonMash} */ (
    jspb.Message.getWrapperField(this, proto.SignageBackend.v1.common.InteractionButtonMash, 2));
};


/**
 * @param {?proto.SignageBackend.v1.common.InteractionButtonMash|undefined} value
 * @return {!proto.SignageBackend.v1.common.InteractionRequest} returns this
*/
proto.SignageBackend.v1.common.InteractionRequest.prototype.setButtonmash = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.SignageBackend.v1.common.InteractionRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.SignageBackend.v1.common.InteractionRequest} returns this
 */
proto.SignageBackend.v1.common.InteractionRequest.prototype.clearButtonmash = function() {
  return this.setButtonmash(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.SignageBackend.v1.common.InteractionRequest.prototype.hasButtonmash = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional InteractionSing Sing = 3;
 * @return {?proto.SignageBackend.v1.common.InteractionSing}
 */
proto.SignageBackend.v1.common.InteractionRequest.prototype.getSing = function() {
  return /** @type{?proto.SignageBackend.v1.common.InteractionSing} */ (
    jspb.Message.getWrapperField(this, proto.SignageBackend.v1.common.InteractionSing, 3));
};


/**
 * @param {?proto.SignageBackend.v1.common.InteractionSing|undefined} value
 * @return {!proto.SignageBackend.v1.common.InteractionRequest} returns this
*/
proto.SignageBackend.v1.common.InteractionRequest.prototype.setSing = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.SignageBackend.v1.common.InteractionRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.SignageBackend.v1.common.InteractionRequest} returns this
 */
proto.SignageBackend.v1.common.InteractionRequest.prototype.clearSing = function() {
  return this.setSing(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.SignageBackend.v1.common.InteractionRequest.prototype.hasSing = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional InteractionVibes Vibe = 4;
 * @return {?proto.SignageBackend.v1.common.InteractionVibes}
 */
proto.SignageBackend.v1.common.InteractionRequest.prototype.getVibe = function() {
  return /** @type{?proto.SignageBackend.v1.common.InteractionVibes} */ (
    jspb.Message.getWrapperField(this, proto.SignageBackend.v1.common.InteractionVibes, 4));
};


/**
 * @param {?proto.SignageBackend.v1.common.InteractionVibes|undefined} value
 * @return {!proto.SignageBackend.v1.common.InteractionRequest} returns this
*/
proto.SignageBackend.v1.common.InteractionRequest.prototype.setVibe = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.SignageBackend.v1.common.InteractionRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.SignageBackend.v1.common.InteractionRequest} returns this
 */
proto.SignageBackend.v1.common.InteractionRequest.prototype.clearVibe = function() {
  return this.setVibe(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.SignageBackend.v1.common.InteractionRequest.prototype.hasVibe = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SignageBackend.v1.common.SignState.prototype.toObject = function(opt_includeInstance) {
  return proto.SignageBackend.v1.common.SignState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SignageBackend.v1.common.SignState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SignageBackend.v1.common.SignState.toObject = function(includeInstance, msg) {
  var f, obj = {
    state: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SignageBackend.v1.common.SignState}
 */
proto.SignageBackend.v1.common.SignState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SignageBackend.v1.common.SignState;
  return proto.SignageBackend.v1.common.SignState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SignageBackend.v1.common.SignState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SignageBackend.v1.common.SignState}
 */
proto.SignageBackend.v1.common.SignState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.SignageBackend.v1.common.SignStateType} */ (reader.readEnum());
      msg.setState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SignageBackend.v1.common.SignState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SignageBackend.v1.common.SignState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SignageBackend.v1.common.SignState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SignageBackend.v1.common.SignState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getState();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional SignStateType State = 1;
 * @return {!proto.SignageBackend.v1.common.SignStateType}
 */
proto.SignageBackend.v1.common.SignState.prototype.getState = function() {
  return /** @type {!proto.SignageBackend.v1.common.SignStateType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.SignageBackend.v1.common.SignStateType} value
 * @return {!proto.SignageBackend.v1.common.SignState} returns this
 */
proto.SignageBackend.v1.common.SignState.prototype.setState = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * @enum {number}
 */
proto.SignageBackend.v1.common.VibeType = {
  FIRE: 0,
  EARTH: 1,
  WATER: 2,
  AIR: 3
};

/**
 * @enum {number}
 */
proto.SignageBackend.v1.common.ColorType = {
  RED: 0,
  BLUE: 1,
  GREEN: 2,
  FUCHSIA: 3,
  AQUA: 4,
  YELLOW: 5
};

/**
 * @enum {number}
 */
proto.SignageBackend.v1.common.InteractionType = {
  NONE: 0,
  BUTTON_MASH: 1,
  SING: 2,
  VIBE: 3
};

/**
 * @enum {number}
 */
proto.SignageBackend.v1.common.SignStateType = {
  ON: 0,
  OFF: 1,
  DOWN: 2,
  FKD_UP: 3
};

goog.object.extend(exports, proto.SignageBackend.v1.common);
