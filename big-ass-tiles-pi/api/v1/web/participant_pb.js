// source: participant.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var common_pb = require('./common_pb.js');
goog.object.extend(proto, common_pb);
goog.exportSymbol('proto.SignageBackend.v1.participant.ConnectionAssignment', null, global);
goog.exportSymbol('proto.SignageBackend.v1.participant.ConnectionResponse', null, global);
goog.exportSymbol('proto.SignageBackend.v1.participant.ConnectionResponse.ResponseCase', null, global);
goog.exportSymbol('proto.SignageBackend.v1.participant.InteractionRequest', null, global);
goog.exportSymbol('proto.SignageBackend.v1.participant.QueuePosition', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SignageBackend.v1.participant.InteractionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SignageBackend.v1.participant.InteractionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.SignageBackend.v1.participant.InteractionRequest.displayName = 'proto.SignageBackend.v1.participant.InteractionRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SignageBackend.v1.participant.ConnectionAssignment = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SignageBackend.v1.participant.ConnectionAssignment, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.SignageBackend.v1.participant.ConnectionAssignment.displayName = 'proto.SignageBackend.v1.participant.ConnectionAssignment';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SignageBackend.v1.participant.QueuePosition = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SignageBackend.v1.participant.QueuePosition, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.SignageBackend.v1.participant.QueuePosition.displayName = 'proto.SignageBackend.v1.participant.QueuePosition';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SignageBackend.v1.participant.ConnectionResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.SignageBackend.v1.participant.ConnectionResponse.oneofGroups_);
};
goog.inherits(proto.SignageBackend.v1.participant.ConnectionResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.SignageBackend.v1.participant.ConnectionResponse.displayName = 'proto.SignageBackend.v1.participant.ConnectionResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SignageBackend.v1.participant.InteractionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.SignageBackend.v1.participant.InteractionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SignageBackend.v1.participant.InteractionRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SignageBackend.v1.participant.InteractionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    participantid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    request: (f = msg.getRequest()) && common_pb.InteractionRequest.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SignageBackend.v1.participant.InteractionRequest}
 */
proto.SignageBackend.v1.participant.InteractionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SignageBackend.v1.participant.InteractionRequest;
  return proto.SignageBackend.v1.participant.InteractionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SignageBackend.v1.participant.InteractionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SignageBackend.v1.participant.InteractionRequest}
 */
proto.SignageBackend.v1.participant.InteractionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setParticipantid(value);
      break;
    case 2:
      var value = new common_pb.InteractionRequest;
      reader.readMessage(value,common_pb.InteractionRequest.deserializeBinaryFromReader);
      msg.setRequest(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SignageBackend.v1.participant.InteractionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SignageBackend.v1.participant.InteractionRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SignageBackend.v1.participant.InteractionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SignageBackend.v1.participant.InteractionRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getParticipantid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getRequest();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      common_pb.InteractionRequest.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 ParticipantId = 1;
 * @return {number}
 */
proto.SignageBackend.v1.participant.InteractionRequest.prototype.getParticipantid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.SignageBackend.v1.participant.InteractionRequest} returns this
 */
proto.SignageBackend.v1.participant.InteractionRequest.prototype.setParticipantid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional SignageBackend.v1.common.InteractionRequest Request = 2;
 * @return {?proto.SignageBackend.v1.common.InteractionRequest}
 */
proto.SignageBackend.v1.participant.InteractionRequest.prototype.getRequest = function() {
  return /** @type{?proto.SignageBackend.v1.common.InteractionRequest} */ (
    jspb.Message.getWrapperField(this, common_pb.InteractionRequest, 2));
};


/**
 * @param {?proto.SignageBackend.v1.common.InteractionRequest|undefined} value
 * @return {!proto.SignageBackend.v1.participant.InteractionRequest} returns this
*/
proto.SignageBackend.v1.participant.InteractionRequest.prototype.setRequest = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.SignageBackend.v1.participant.InteractionRequest} returns this
 */
proto.SignageBackend.v1.participant.InteractionRequest.prototype.clearRequest = function() {
  return this.setRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.SignageBackend.v1.participant.InteractionRequest.prototype.hasRequest = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SignageBackend.v1.participant.ConnectionAssignment.prototype.toObject = function(opt_includeInstance) {
  return proto.SignageBackend.v1.participant.ConnectionAssignment.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SignageBackend.v1.participant.ConnectionAssignment} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SignageBackend.v1.participant.ConnectionAssignment.toObject = function(includeInstance, msg) {
  var f, obj = {
    connectionid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SignageBackend.v1.participant.ConnectionAssignment}
 */
proto.SignageBackend.v1.participant.ConnectionAssignment.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SignageBackend.v1.participant.ConnectionAssignment;
  return proto.SignageBackend.v1.participant.ConnectionAssignment.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SignageBackend.v1.participant.ConnectionAssignment} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SignageBackend.v1.participant.ConnectionAssignment}
 */
proto.SignageBackend.v1.participant.ConnectionAssignment.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setConnectionid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SignageBackend.v1.participant.ConnectionAssignment.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SignageBackend.v1.participant.ConnectionAssignment.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SignageBackend.v1.participant.ConnectionAssignment} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SignageBackend.v1.participant.ConnectionAssignment.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConnectionid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 ConnectionId = 1;
 * @return {number}
 */
proto.SignageBackend.v1.participant.ConnectionAssignment.prototype.getConnectionid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.SignageBackend.v1.participant.ConnectionAssignment} returns this
 */
proto.SignageBackend.v1.participant.ConnectionAssignment.prototype.setConnectionid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SignageBackend.v1.participant.QueuePosition.prototype.toObject = function(opt_includeInstance) {
  return proto.SignageBackend.v1.participant.QueuePosition.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SignageBackend.v1.participant.QueuePosition} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SignageBackend.v1.participant.QueuePosition.toObject = function(includeInstance, msg) {
  var f, obj = {
    connectionposition: jspb.Message.getFieldWithDefault(msg, 1, 0),
    queuelength: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SignageBackend.v1.participant.QueuePosition}
 */
proto.SignageBackend.v1.participant.QueuePosition.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SignageBackend.v1.participant.QueuePosition;
  return proto.SignageBackend.v1.participant.QueuePosition.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SignageBackend.v1.participant.QueuePosition} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SignageBackend.v1.participant.QueuePosition}
 */
proto.SignageBackend.v1.participant.QueuePosition.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setConnectionposition(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setQueuelength(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SignageBackend.v1.participant.QueuePosition.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SignageBackend.v1.participant.QueuePosition.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SignageBackend.v1.participant.QueuePosition} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SignageBackend.v1.participant.QueuePosition.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConnectionposition();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getQueuelength();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional uint32 ConnectionPosition = 1;
 * @return {number}
 */
proto.SignageBackend.v1.participant.QueuePosition.prototype.getConnectionposition = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.SignageBackend.v1.participant.QueuePosition} returns this
 */
proto.SignageBackend.v1.participant.QueuePosition.prototype.setConnectionposition = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 QueueLength = 2;
 * @return {number}
 */
proto.SignageBackend.v1.participant.QueuePosition.prototype.getQueuelength = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.SignageBackend.v1.participant.QueuePosition} returns this
 */
proto.SignageBackend.v1.participant.QueuePosition.prototype.setQueuelength = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.SignageBackend.v1.participant.ConnectionResponse.oneofGroups_ = [[2,3,4,5]];

/**
 * @enum {number}
 */
proto.SignageBackend.v1.participant.ConnectionResponse.ResponseCase = {
  RESPONSE_NOT_SET: 0,
  CONNECTIONASSIGNMENT: 2,
  SIGNSTATE: 3,
  QUEUEPOSITION: 4,
  INCONTROL: 5
};

/**
 * @return {proto.SignageBackend.v1.participant.ConnectionResponse.ResponseCase}
 */
proto.SignageBackend.v1.participant.ConnectionResponse.prototype.getResponseCase = function() {
  return /** @type {proto.SignageBackend.v1.participant.ConnectionResponse.ResponseCase} */(jspb.Message.computeOneofCase(this, proto.SignageBackend.v1.participant.ConnectionResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SignageBackend.v1.participant.ConnectionResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.SignageBackend.v1.participant.ConnectionResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SignageBackend.v1.participant.ConnectionResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SignageBackend.v1.participant.ConnectionResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    connectionassignment: (f = msg.getConnectionassignment()) && proto.SignageBackend.v1.participant.ConnectionAssignment.toObject(includeInstance, f),
    signstate: (f = msg.getSignstate()) && common_pb.SignState.toObject(includeInstance, f),
    queueposition: (f = msg.getQueueposition()) && proto.SignageBackend.v1.participant.QueuePosition.toObject(includeInstance, f),
    incontrol: (f = msg.getIncontrol()) && common_pb.EmptyRequest.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SignageBackend.v1.participant.ConnectionResponse}
 */
proto.SignageBackend.v1.participant.ConnectionResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SignageBackend.v1.participant.ConnectionResponse;
  return proto.SignageBackend.v1.participant.ConnectionResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SignageBackend.v1.participant.ConnectionResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SignageBackend.v1.participant.ConnectionResponse}
 */
proto.SignageBackend.v1.participant.ConnectionResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = new proto.SignageBackend.v1.participant.ConnectionAssignment;
      reader.readMessage(value,proto.SignageBackend.v1.participant.ConnectionAssignment.deserializeBinaryFromReader);
      msg.setConnectionassignment(value);
      break;
    case 3:
      var value = new common_pb.SignState;
      reader.readMessage(value,common_pb.SignState.deserializeBinaryFromReader);
      msg.setSignstate(value);
      break;
    case 4:
      var value = new proto.SignageBackend.v1.participant.QueuePosition;
      reader.readMessage(value,proto.SignageBackend.v1.participant.QueuePosition.deserializeBinaryFromReader);
      msg.setQueueposition(value);
      break;
    case 5:
      var value = new common_pb.EmptyRequest;
      reader.readMessage(value,common_pb.EmptyRequest.deserializeBinaryFromReader);
      msg.setIncontrol(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SignageBackend.v1.participant.ConnectionResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SignageBackend.v1.participant.ConnectionResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SignageBackend.v1.participant.ConnectionResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SignageBackend.v1.participant.ConnectionResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConnectionassignment();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.SignageBackend.v1.participant.ConnectionAssignment.serializeBinaryToWriter
    );
  }
  f = message.getSignstate();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      common_pb.SignState.serializeBinaryToWriter
    );
  }
  f = message.getQueueposition();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.SignageBackend.v1.participant.QueuePosition.serializeBinaryToWriter
    );
  }
  f = message.getIncontrol();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      common_pb.EmptyRequest.serializeBinaryToWriter
    );
  }
};


/**
 * optional ConnectionAssignment ConnectionAssignment = 2;
 * @return {?proto.SignageBackend.v1.participant.ConnectionAssignment}
 */
proto.SignageBackend.v1.participant.ConnectionResponse.prototype.getConnectionassignment = function() {
  return /** @type{?proto.SignageBackend.v1.participant.ConnectionAssignment} */ (
    jspb.Message.getWrapperField(this, proto.SignageBackend.v1.participant.ConnectionAssignment, 2));
};


/**
 * @param {?proto.SignageBackend.v1.participant.ConnectionAssignment|undefined} value
 * @return {!proto.SignageBackend.v1.participant.ConnectionResponse} returns this
*/
proto.SignageBackend.v1.participant.ConnectionResponse.prototype.setConnectionassignment = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.SignageBackend.v1.participant.ConnectionResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.SignageBackend.v1.participant.ConnectionResponse} returns this
 */
proto.SignageBackend.v1.participant.ConnectionResponse.prototype.clearConnectionassignment = function() {
  return this.setConnectionassignment(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.SignageBackend.v1.participant.ConnectionResponse.prototype.hasConnectionassignment = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional SignageBackend.v1.common.SignState SignState = 3;
 * @return {?proto.SignageBackend.v1.common.SignState}
 */
proto.SignageBackend.v1.participant.ConnectionResponse.prototype.getSignstate = function() {
  return /** @type{?proto.SignageBackend.v1.common.SignState} */ (
    jspb.Message.getWrapperField(this, common_pb.SignState, 3));
};


/**
 * @param {?proto.SignageBackend.v1.common.SignState|undefined} value
 * @return {!proto.SignageBackend.v1.participant.ConnectionResponse} returns this
*/
proto.SignageBackend.v1.participant.ConnectionResponse.prototype.setSignstate = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.SignageBackend.v1.participant.ConnectionResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.SignageBackend.v1.participant.ConnectionResponse} returns this
 */
proto.SignageBackend.v1.participant.ConnectionResponse.prototype.clearSignstate = function() {
  return this.setSignstate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.SignageBackend.v1.participant.ConnectionResponse.prototype.hasSignstate = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional QueuePosition QueuePosition = 4;
 * @return {?proto.SignageBackend.v1.participant.QueuePosition}
 */
proto.SignageBackend.v1.participant.ConnectionResponse.prototype.getQueueposition = function() {
  return /** @type{?proto.SignageBackend.v1.participant.QueuePosition} */ (
    jspb.Message.getWrapperField(this, proto.SignageBackend.v1.participant.QueuePosition, 4));
};


/**
 * @param {?proto.SignageBackend.v1.participant.QueuePosition|undefined} value
 * @return {!proto.SignageBackend.v1.participant.ConnectionResponse} returns this
*/
proto.SignageBackend.v1.participant.ConnectionResponse.prototype.setQueueposition = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.SignageBackend.v1.participant.ConnectionResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.SignageBackend.v1.participant.ConnectionResponse} returns this
 */
proto.SignageBackend.v1.participant.ConnectionResponse.prototype.clearQueueposition = function() {
  return this.setQueueposition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.SignageBackend.v1.participant.ConnectionResponse.prototype.hasQueueposition = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional SignageBackend.v1.common.EmptyRequest InControl = 5;
 * @return {?proto.SignageBackend.v1.common.EmptyRequest}
 */
proto.SignageBackend.v1.participant.ConnectionResponse.prototype.getIncontrol = function() {
  return /** @type{?proto.SignageBackend.v1.common.EmptyRequest} */ (
    jspb.Message.getWrapperField(this, common_pb.EmptyRequest, 5));
};


/**
 * @param {?proto.SignageBackend.v1.common.EmptyRequest|undefined} value
 * @return {!proto.SignageBackend.v1.participant.ConnectionResponse} returns this
*/
proto.SignageBackend.v1.participant.ConnectionResponse.prototype.setIncontrol = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.SignageBackend.v1.participant.ConnectionResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.SignageBackend.v1.participant.ConnectionResponse} returns this
 */
proto.SignageBackend.v1.participant.ConnectionResponse.prototype.clearIncontrol = function() {
  return this.setIncontrol(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.SignageBackend.v1.participant.ConnectionResponse.prototype.hasIncontrol = function() {
  return jspb.Message.getField(this, 5) != null;
};


goog.object.extend(exports, proto.SignageBackend.v1.participant);
